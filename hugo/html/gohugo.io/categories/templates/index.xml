<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>templates on Hugo</title><link>https://gohugo.io/categories/templates/</link><description>Recent content in templates on Hugo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://gohugo.io/categories/templates/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Hugo Templating</title><link>https://gohugo.io/templates/introduction/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/introduction/</guid><description>The following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs.
Go Templates provide an extremely simple template language that adheres to the belief that only the most basic of logic belongs in the template or view layer.
Basic Syntax Go Templates are HTML files with the addition of variables and functions. Go Template variables and functions are accessible within {{ }}.</description></item><item><title>Hugo's Lookup Order</title><link>https://gohugo.io/templates/lookup-order/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/lookup-order/</guid><description>Hugo Layouts Lookup Rules Hugo takes the parameters listed below into consideration when choosing a layout for a given page. They are listed in a priority order. This should feel natural, but look at the table below for concrete examples of the different parameter variations.
Kind The page Kind (the home page is one). See the example tables below per kind. This also determines if it is a single page (i.</description></item><item><title>Custom Output Formats</title><link>https://gohugo.io/templates/output-formats/</link><pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/output-formats/</guid><description>This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.
Media Types A media type (also known as MIME type and content type) is a two-part identifier for file formats and format contents transmitted on the Internet.
This is the full set of built-in media types in Hugo:
type suffixes application/javascript [js] application/json [json] application/octet-stream application/rss&amp;#43;xml [xml] application/toml [toml] application/xml [xml] application/yaml [yaml yml] image/jpeg [jpg jpeg] image/png [png] image/svg&amp;#43;xml [svg] text/calendar [ics] text/css [css] text/csv [csv] text/html [html] text/plain [txt] text/x-sass [sass] text/x-scss [scss] video/3gpp [3gpp 3gp] video/mp4 [mp4] video/mpeg [mpg mpeg] video/ogg [ogv] video/webm [webm] video/x-msvideo [avi] Note:</description></item><item><title>Base Templates and Blocks</title><link>https://gohugo.io/templates/base/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/base/</guid><description>The block keyword allows you to define the outer shell of your pages&amp;rsquo; one or more master template(s) and then fill in or override portions as necessary.
Base Template Lookup Order The lookup order for base templates is as follows:
/layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /layouts/&amp;lt;TYPE&amp;gt;/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/&amp;lt;TYPE&amp;gt;/baseof.html /layouts/section/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/baseof.html /layouts/_default/&amp;lt;TYPE&amp;gt;-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/&amp;lt;TYPE&amp;gt;-baseof.html /layouts/_default/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/baseof.html Variables are denoted by capitalized text set within &amp;lt;&amp;gt;. Note that Hugo's default behavior is for type to inherit from section unless otherwise specified.</description></item><item><title>Lists of Content in Hugo</title><link>https://gohugo.io/templates/lists/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/lists/</guid><description>What is a List Page Template? A list page template is a template used to render multiple pieces of content in a single HTML page. The exception to this rule is the homepage, which is still a list but has its own dedicated template.
Hugo uses the term list in its truest sense; i.e. a sequential arrangement of material, especially in alphabetical or numerical order. Hugo uses list templates on any output HTML page where content is traditionally listed:</description></item><item><title>Homepage Template</title><link>https://gohugo.io/templates/homepage/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/homepage/</guid><description>Homepage is a Page and therefore has all the page variables and site variables available for use.
The homepage template is the only required template for building a site and therefore useful when bootstrapping a new site and template. It is also the only required template if you are developing a single-page website.
Homepage Template Lookup Order See Template Lookup.
Add Content and Front Matter to the Homepage The homepage, similar to other list pages in Hugo, accepts content and front matter from an _index.</description></item><item><title>Section Page Templates</title><link>https://gohugo.io/templates/section-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/section-templates/</guid><description>Add Content and Front Matter to Section Templates To effectively leverage section page templates, you should first understand Hugo's content organization and, specifically, the purpose of _index.md for adding content and front matter to section and other list pages.
Section Template Lookup Order See Template Lookup.
Page Kinds Every Page in Hugo has a .Kind attribute.
Kind Description Example home The home page /index.</description></item><item><title>Taxonomy Templates</title><link>https://gohugo.io/templates/taxonomy-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/taxonomy-templates/</guid><description>Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications that demonstrate logical relationships between content. See Taxonomies under Content Management if you are unfamiliar with how Hugo leverages this powerful feature.
Hugo provides multiple ways to use taxonomies throughout your project templates:
Order the way content associated with a taxonomy term is displayed in a taxonomy list template Order the way the terms for a taxonomy are displayed in a taxonomy terms template List a single content's taxonomy terms within a single page template Taxonomy List Templates Taxonomy list page templates are lists and therefore have all the variables and methods available to list pages.</description></item><item><title>Single Page Templates</title><link>https://gohugo.io/templates/single-page-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/single-page-templates/</guid><description>Single Page Template Lookup Order See Template Lookup.
Example Single Page Templates Content pages are of the type page and will therefore have all the page variables and site variables available to use in their templates.
posts/single.html This single page template makes use of Hugo base templates, the .Format function for dates, the .WordCount page variable, and ranges through the single content's specific taxonomies. with is also used to check whether the taxonomies are set in the front matter.</description></item><item><title>Content View Templates</title><link>https://gohugo.io/templates/views/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/views/</guid><description>These alternative content views are especially useful in list templates.
The following are common use cases for content views:
You want content of every type to be shown on the homepage but only with limited summary views. You only want a bulleted list of your content on a taxonomy list page. Views make this very straightforward by delegating the rendering of each different type of content to the content itself.</description></item><item><title>Data Templates</title><link>https://gohugo.io/templates/data-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/data-templates/</guid><description>Hugo supports loading data from YAML, JSON, and TOML files located in the data directory in the root of your Hugo project.
The Data Folder The data folder is where you can store additional data for Hugo to use when generating your site. Data files aren't used to generate standalone pages; rather, they're meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control.</description></item><item><title>Partial Templates</title><link>https://gohugo.io/templates/partials/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/partials/</guid><description>Partial Template Lookup Order Partial templates&amp;mdash;like single page templates and list page templates&amp;mdash;have a specific lookup order. However, partials are simpler in that Hugo will only check in two places:
layouts/partials/*&amp;lt;PARTIALNAME&amp;gt;.html themes/&amp;lt;THEME&amp;gt;/layouts/partials/*&amp;lt;PARTIALNAME&amp;gt;.html This allows a theme's end user to copy a partial's contents into a file of the same name for further customization.
Use Partials in your Templates All partials for your Hugo project are located in a single layouts/partials directory.</description></item><item><title>Create Your Own Shortcodes</title><link>https://gohugo.io/templates/shortcode-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/shortcode-templates/</guid><description>Shortcodes are a means to consolidate templating into small, reusable snippets that you can embed directly inside of your content. In this sense, you can think of shortcodes as the intermediary between page and list templates and basic content files.
Hugo also ships with built-in shortcodes for common use cases. (See Content Management: Shortcodes.)
Create Custom Shortcodes Hugo's built-in shortcodes cover many common, but not all, use cases.</description></item><item><title>Local File Templates</title><link>https://gohugo.io/templates/files/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/files/</guid><description>Traverse Local Files With Hugo's readDir and readFile template functions, you can traverse your website's files on your server.
Use readDir The readDir function returns an array of os.FileInfo. It takes the file's path as a single string argument. This path can be to any directory of your website (i.e., as found on your server's file system).
Whether the path is absolute or relative does not matter because&amp;mdash;at least for readDir&amp;mdash;the root of your website (typically .</description></item><item><title>Custom 404 Page</title><link>https://gohugo.io/templates/404/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/404/</guid><description>When using Hugo with GitHub Pages, you can provide your own template for a custom 404 error page by creating a 404.html template file in your /layouts folder. When Hugo generates your site, the 404.html file will be placed in the root.
404 pages will have all the regular page variables available to use in the templates.
In addition to the standard page variables, the 404 page has access to all site content accessible from .</description></item><item><title>Menu Templates</title><link>https://gohugo.io/templates/menu-templates/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/menu-templates/</guid><description>Hugo makes no assumptions about how your rendered HTML will be structured. Instead, it provides all of the functions you will need to be able to build your menu however you want.
The following is an example:
layouts/partials/sidebar.html &amp;lt;!-- sidebar start --&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;ul&amp;gt; {{$currentPage:=.}} {{range.Site.Menus.main}} {{if.HasChildren}} &amp;lt;li class=&amp;#34;{{if$currentPage.HasMenuCurrent&amp;#34;main&amp;#34;.}}active{{end}}&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt; {{.Pre}} &amp;lt;span&amp;gt;{{.Name}}&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;ul class=&amp;#34;sub-menu&amp;#34;&amp;gt; {{range.Children}} &amp;lt;li class=&amp;#34;{{if$currentPage.IsMenuCurrent&amp;#34;main&amp;#34;.}}active{{end}}&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;{{.URL}}&amp;#34;&amp;gt;{{.Name}}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; {{end}} &amp;lt;/ul&amp;gt; {{else}} &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;{{.URL}}&amp;#34;&amp;gt; {{.</description></item><item><title>Pagination</title><link>https://gohugo.io/templates/pagination/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/pagination/</guid><description>The real power of Hugo pagination shines when combined with the where function and its SQL-like operators: first, last, and after. You can even order the content the way you've become used to with Hugo.
Configure Pagination Pagination can be configured in your site configuration:
Paginate default = 10. This setting can be overridden within the template. PaginatePath default = page. Allows you to set a different path for your pagination pages.</description></item><item><title>RSS Templates</title><link>https://gohugo.io/templates/rss/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/rss/</guid><description>RSS Template Lookup Order See Template Lookup Order for the complete reference.
Hugo ships with its own RSS 2.0 template. The embedded template will be sufficient for most use cases.
RSS pages are of the type Page and have all the page variables available to use in the templates.
Section RSS A section’s RSS will be rendered at /&amp;lt;SECTION&amp;gt;/index.xml (e.g., https://spf13.com/project/index.xml).
Hugo provides the ability for you to define any RSS type you wish and can have different RSS files for each section and taxonomy.</description></item><item><title>Sitemap Template</title><link>https://gohugo.io/templates/sitemap-template/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/sitemap-template/</guid><description>A single Sitemap template is used to generate the sitemap.xml file. Hugo automatically comes with this template file. No work is needed on the users&amp;rsquo; part unless they want to customize sitemap.xml.
A sitemap is a Page and therefore has all the page variables available to use in this template along with Sitemap-specific ones:
.Sitemap.ChangeFreq The page change frequency .Sitemap.Priority The priority of the page .Sitemap.Filename The sitemap filename If provided, Hugo will use /layouts/sitemap.</description></item><item><title>Robots.txt File</title><link>https://gohugo.io/templates/robots/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/robots/</guid><description>To create your robots.txt as a template, first set the enableRobotsTXT value to true in your configuration file. By default, this option generates a robots.txt with the following content, which tells search engines that they are allowed to crawl everything:
User-agent: * Robots.txt Template Lookup Order The lookup order for the robots.txt template is as follows:
/layouts/robots.txt /themes/&amp;lt;THEME&amp;gt;/layouts/robots.txt If you do not want Hugo to create a default robots.</description></item><item><title>Internal Templates</title><link>https://gohugo.io/templates/internal/</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/internal/</guid><description>While the following internal templates are called similar to partials, they do not observe the partial template lookup order.
Google Analytics Hugo ships with internal templates for Google Analytics tracking, including both synchronous and asynchronous tracking codes.
Configure Google Analytics Provide your tracking id in your configuration file:
config. yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; googleAnalytics:UA-123-45 googleAnalytics = &amp;#34;UA-123-45&amp;#34; { &amp;#34;googleAnalytics&amp;#34;: &amp;#34;UA-123-45&amp;#34; } Use the Google Analytics Template You can then include the Google Analytics internal template:</description></item><item><title>Alternative Templating Languages</title><link>https://gohugo.io/templates/alternatives/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/alternatives/</guid><description>Ace Templates For template documentation, follow the links from the Ace project.
Ace templates must be named with the ace-suffix; e.g., list.ace It's possible to use both Go templates and Ace templates side by side and even include one into the other Full Go template syntax support, including all the useful helper template functions Partials can be included both with the Ace and the Go template syntax. For example, the following two will have the same output in Ace: = include partials/foo.</description></item><item><title>Template Debugging</title><link>https://gohugo.io/templates/template-debugging/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/template-debugging/</guid><description>Here are some snippets you can add to your template to answer some common questions.
These snippets use the printf function available in all Go templates. This function is an alias to the Go function, fmt.Printf.
What Variables are Available in this Context? You can use the template syntax, $., to get the top-level template context from anywhere in your template. This will print out all the values under, .Site.</description></item></channel></rss>